package cpu

import (
	"fmt"
	"slices"
)

type OpCode struct {
	Name       string
	Len        uint8
	Cycles     uint8
	CondCycles uint8 // Used for conditional instructions
	Exec       Instruction
}

func (o *OpCode) Code() int {
	return slices.Index(opcodes, o)
}

func (o *OpCode) String() string {
	return fmt.Sprintf(
		"0x%02X %s %d %d",
		o.Code(),
		o.Name,
		o.Len,
		o.Cycles,
	)
}

//nolint:gochecknoglobals
var opcodes = []*OpCode{
	0x00: {Name: "NOP", Len: 1, Cycles: 1, Exec: func(_ *SM83) {}},
	0x01: {Name: "LD BC,nn", Len: 3, Cycles: 3, Exec: func(c *SM83) { ldCombRegister16Imm(c, &c.rB, &c.rC) }},
	0x02: {Name: "LD (BC),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rB, &c.rC, &c.rA) }},
	0x03: {Name: "INC BC", Len: 1, Cycles: 2, Exec: func(c *SM83) { incCombRegister(c, &c.rB, &c.rC) }},
	0x04: {Name: "INC B", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rB) }},
	0x05: {Name: "DEC B", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rB) }},
	0x06: {Name: "LD B,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rB) }},
	// 0x07: {Name: "RLCA", Len: 1, Cycles: 1, Exec: func(c *SM83) { rlcRegister(c, &c.r_A) }},
	0x08: {Name: "LD (nn),SP", Len: 3, Cycles: 5, Exec: func(c *SM83) { ldMem16Register(c, &c.rSP) }},
	0x09: {Name: "ADD HL,BC", Len: 1, Cycles: 2, Exec: func(c *SM83) { addCombRegisterCombRegister(c, &c.rH, &c.rL, &c.rB, &c.rC) }},
	0x0A: {Name: "LD A,(BC)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rA, &c.rB, &c.rC) }},
	0x0B: {Name: "DEC BC", Len: 1, Cycles: 2, Exec: func(c *SM83) { decCombRegister(c, &c.rB, &c.rC) }},
	0x0C: {Name: "INC C", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rC) }},
	0x0D: {Name: "DEC C", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rC) }},
	0x0E: {Name: "LD C,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rC) }},
	// 0x0F: {Name: "RRCA", Len: 1, Cycles: 1, Exec: func(c *SM83) { rrcRegister(c, &c.r_A) }},
	0x10: {Name: "STOP", Len: 1, Cycles: 2, Exec: func(c *SM83) { c.Halt() }},
	0x11: {Name: "LD DE,nn", Len: 3, Cycles: 3, Exec: func(c *SM83) { ldCombRegister16Imm(c, &c.rD, &c.rE) }},
	0x12: {Name: "LD (DE),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rD, &c.rE, &c.rA) }},
	0x13: {Name: "INC DE", Len: 1, Cycles: 2, Exec: func(c *SM83) { incCombRegister(c, &c.rD, &c.rE) }},
	0x14: {Name: "INC D", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rD) }},
	0x15: {Name: "DEC D", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rD) }},
	0x16: {Name: "LD D,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rD) }},
	0x17: {Name: "RLA", Len: 1, Cycles: 1, Exec: func(c *SM83) { rla(c) }},
	0x18: {Name: "JR n", Len: 2, Cycles: 3, Exec: func(c *SM83) { jr(c) }},
	0x19: {Name: "ADD HL,DE", Len: 1, Cycles: 2, Exec: func(c *SM83) { addCombRegisterCombRegister(c, &c.rH, &c.rL, &c.rD, &c.rE) }},
	0x1A: {Name: "LD A,(DE)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rA, &c.rD, &c.rE) }},
	0x1B: {Name: "DEC DE", Len: 1, Cycles: 2, Exec: func(c *SM83) { decCombRegister(c, &c.rD, &c.rE) }},
	0x1C: {Name: "INC E", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rE) }},
	0x1D: {Name: "DEC E", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rE) }},
	0x1E: {Name: "LD E,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rE) }},
	// 0x1F: {Name: "RRA", Len: 1, Cycles: 1, Exec: func(c *SM83) { rra(c) }},
	0x20: {Name: "JR NZ,n", Len: 2, Cycles: 3, CondCycles: 2, Exec: func(c *SM83) { jrCond(c, !c.GetFlag(ZeroFlag)) }},
	0x21: {Name: "LD HL,nn", Len: 3, Cycles: 3, Exec: func(c *SM83) { ldCombRegister16Imm(c, &c.rH, &c.rL) }},
	0x22: {Name: "LD (HL+),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegisterInc(c, &c.rH, &c.rL, &c.rA) }},
	0x23: {Name: "INC HL", Len: 1, Cycles: 1, Exec: func(c *SM83) { incCombRegister(c, &c.rH, &c.rL) }},
	0x24: {Name: "INC H", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rH) }},
	0x25: {Name: "DEC H", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rH) }},
	0x26: {Name: "LD H,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rH) }},
	0x27: {Name: "DAA", Len: 1, Cycles: 1, Exec: func(c *SM83) { daa(c) }},
	0x28: {Name: "JR Z,nn", Len: 2, Cycles: 3, CondCycles: 2, Exec: func(c *SM83) { jrCond(c, c.GetFlag(ZeroFlag)) }},
	0x29: {Name: "ADD HL,HL", Len: 1, Cycles: 2, Exec: func(c *SM83) { addCombRegisterCombRegister(c, &c.rH, &c.rL, &c.rH, &c.rL) }},
	0x2A: {Name: "LD A,(HL+)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemCombInc(c, &c.rA, &c.rH, &c.rL) }},
	0x2B: {Name: "DEC HL", Len: 1, Cycles: 2, Exec: func(c *SM83) { decCombRegister(c, &c.rH, &c.rL) }},
	0x2C: {Name: "INC L", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rL) }},
	0x2D: {Name: "DEC L", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rL) }},
	0x2E: {Name: "LD L,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rL) }},
	0x2F: {Name: "CPL", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpl(c) }},
	0x30: {Name: "JR NC,n", Len: 2, Cycles: 3, CondCycles: 2, Exec: func(c *SM83) { jrCond(c, !c.GetFlag(CarryFlag)) }},
	0x31: {Name: "LD SP,nn", Len: 3, Cycles: 3, Exec: func(c *SM83) { ld16Register16Imm(c, &c.rSP) }},
	0x32: {Name: "LD (HL-),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegisterDec(c, &c.rH, &c.rL, &c.rA) }},
	0x33: {Name: "INC SP", Len: 1, Cycles: 2, Exec: func(c *SM83) { inc16Register(c, &c.rSP) }},
	0x34: {Name: "INC (HL)", Len: 1, Cycles: 3, Exec: func(c *SM83) { incMemComb(c, &c.rH, &c.rL) }},
	0x35: {Name: "DEC (HL)", Len: 1, Cycles: 3, Exec: func(c *SM83) { decMemComb(c, &c.rH, &c.rL) }},
	0x36: {Name: "LD (HL),n", Len: 2, Cycles: 3, Exec: func(c *SM83) { ldMemCombImm(c, &c.rH, &c.rL) }},
	0x37: {Name: "SCF", Len: 1, Cycles: 1, Exec: func(c *SM83) { scf(c) }},
	0x38: {Name: "JR C,nn", Len: 2, Cycles: 3, CondCycles: 2, Exec: func(c *SM83) { jrCond(c, c.GetFlag(CarryFlag)) }},
	0x39: {Name: "ADD HL,SP", Len: 1, Cycles: 2, Exec: func(c *SM83) { addCombRegister16Register(c, &c.rH, &c.rL, &c.rSP) }},
	0x3A: {Name: "LD A,(HL-)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemCombDec(c, &c.rA, &c.rH, &c.rL) }},
	0x3B: {Name: "DEC SP", Len: 1, Cycles: 2, Exec: func(c *SM83) { dec16Register(c, &c.rSP) }},
	0x3C: {Name: "INC A", Len: 1, Cycles: 1, Exec: func(c *SM83) { incRegister(c, &c.rA) }},
	0x3D: {Name: "DEC A", Len: 1, Cycles: 1, Exec: func(c *SM83) { decRegister(c, &c.rA) }},
	0x3E: {Name: "LD A,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { ldRegisterImm(c, &c.rA) }},
	// 0x3F: {Name: "CCF", Len: 1, Cycles: 1, Exec: func(c *SM83) { ccf(c) }},
	0x40: {Name: "LD B,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rB) }},
	0x41: {Name: "LD B,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rC) }},
	0x42: {Name: "LD B,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rD) }},
	0x43: {Name: "LD B,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rE) }},
	0x44: {Name: "LD B,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rH) }},
	0x45: {Name: "LD B,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rL) }},
	0x46: {Name: "LD B,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rB, &c.rH, &c.rL) }},
	0x47: {Name: "LD B,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rB, &c.rA) }},
	0x48: {Name: "LD C,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rB) }},
	0x49: {Name: "LD C,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rC) }},
	0x4A: {Name: "LD C,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rD) }},
	0x4B: {Name: "LD C,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rE) }},
	0x4C: {Name: "LD C,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rH) }},
	0x4D: {Name: "LD C,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rL) }},
	0x4E: {Name: "LD C,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rC, &c.rH, &c.rL) }},
	0x4F: {Name: "LD C,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rC, &c.rA) }},
	0x50: {Name: "LD D,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rB) }},
	0x51: {Name: "LD D,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rC) }},
	0x52: {Name: "LD D,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rD) }},
	0x53: {Name: "LD D,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rE) }},
	0x54: {Name: "LD D,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rH) }},
	0x55: {Name: "LD D,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rL) }},
	0x56: {Name: "LD D,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rD, &c.rH, &c.rL) }},
	0x57: {Name: "LD D,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rD, &c.rA) }},
	0x58: {Name: "LD E,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rB) }},
	0x59: {Name: "LD E,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rC) }},
	0x5A: {Name: "LD E,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rD) }},
	0x5B: {Name: "LD E,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rE) }},
	0x5C: {Name: "LD E,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rH) }},
	0x5D: {Name: "LD E,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rL) }},
	0x5E: {Name: "LD E,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rE, &c.rH, &c.rL) }},
	0x5F: {Name: "LD E,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rE, &c.rA) }},
	0x60: {Name: "LD H,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rB) }},
	0x61: {Name: "LD H,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rC) }},
	0x62: {Name: "LD H,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rD) }},
	0x63: {Name: "LD H,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rE) }},
	0x64: {Name: "LD H,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rH) }},
	0x65: {Name: "LD H,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rL) }},
	0x66: {Name: "LD H,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rH, &c.rH, &c.rL) }},
	0x67: {Name: "LD H,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rH, &c.rA) }},
	0x68: {Name: "LD L,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rB) }},
	0x69: {Name: "LD L,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rC) }},
	0x6A: {Name: "LD L,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rD) }},
	0x6B: {Name: "LD L,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rE) }},
	0x6C: {Name: "LD L,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rH) }},
	0x6D: {Name: "LD L,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rL) }},
	0x6E: {Name: "LD L,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rL, &c.rH, &c.rL) }},
	0x6F: {Name: "LD L,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rL, &c.rA) }},
	0x70: {Name: "LD (HL),B", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rB) }},
	0x71: {Name: "LD (HL),C", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rC) }},
	0x72: {Name: "LD (HL),D", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rD) }},
	0x73: {Name: "LD (HL),E", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rE) }},
	0x74: {Name: "LD (HL),H", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rH) }},
	0x75: {Name: "LD (HL),L", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rL) }},
	0x76: {Name: "HALT", Len: 1, Cycles: 1, Exec: func(c *SM83) { c.Halt() }},
	0x77: {Name: "LD (HL),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemCombRegister(c, &c.rH, &c.rL, &c.rA) }},
	0x78: {Name: "LD A,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rB) }},
	0x79: {Name: "LD A,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rC) }},
	0x7A: {Name: "LD A,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rD) }},
	0x7B: {Name: "LD A,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rE) }},
	0x7C: {Name: "LD A,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rH) }},
	0x7D: {Name: "LD A,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rL) }},
	0x7E: {Name: "LD A,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0x7F: {Name: "LD A,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { ldRegisterRegister(c, &c.rA, &c.rA) }},
	0x80: {Name: "ADD A,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rB) }},
	0x81: {Name: "ADD A,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rC) }},
	0x82: {Name: "ADD A,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rD) }},
	0x83: {Name: "ADD A,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rE) }},
	0x84: {Name: "ADD A,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rH) }},
	0x85: {Name: "ADD A,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rL) }},
	0x86: {Name: "ADD A,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { addRegisterMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0x87: {Name: "ADD A,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { addRegister(c, &c.rA, &c.rA) }},
	0x88: {Name: "ADC A,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rB) }},
	0x89: {Name: "ADC A,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rC) }},
	0x8A: {Name: "ADC A,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rD) }},
	0x8B: {Name: "ADC A,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rE) }},
	0x8C: {Name: "ADC A,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rH) }},
	0x8D: {Name: "ADC A,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rL) }},
	0x8E: {Name: "ADC A,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { adcMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0x8F: {Name: "ADC A,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { adcRegister(c, &c.rA, &c.rA) }},
	0x90: {Name: "SUB B", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rB) }},
	0x91: {Name: "SUB C", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rC) }},
	0x92: {Name: "SUB D", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rD) }},
	0x93: {Name: "SUB E", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rE) }},
	0x94: {Name: "SUB H", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rH) }},
	0x95: {Name: "SUB L", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rL) }},
	0x96: {Name: "SUB (HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { subMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0x97: {Name: "SUB A", Len: 1, Cycles: 1, Exec: func(c *SM83) { subRegister(c, &c.rA, &c.rA) }},
	0x98: {Name: "SBC A,B", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rB) }},
	0x99: {Name: "SBC A,C", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rC) }},
	0x9A: {Name: "SBC A,D", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rD) }},
	0x9B: {Name: "SBC A,E", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rE) }},
	0x9C: {Name: "SBC A,H", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rH) }},
	0x9D: {Name: "SBC A,L", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rL) }},
	0x9E: {Name: "SBC A,(HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { sbcMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0x9F: {Name: "SBC A,A", Len: 1, Cycles: 1, Exec: func(c *SM83) { sbcRegister(c, &c.rA, &c.rA) }},
	0xA0: {Name: "AND B", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rB) }},
	0xA1: {Name: "AND C", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rC) }},
	0xA2: {Name: "AND D", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rD) }},
	0xA3: {Name: "AND E", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rE) }},
	0xA4: {Name: "AND H", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rH) }},
	0xA5: {Name: "AND L", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rL) }},
	0xA6: {Name: "AND (HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { andMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0xA7: {Name: "AND A", Len: 1, Cycles: 1, Exec: func(c *SM83) { andRegister(c, &c.rA, &c.rA) }},
	0xA8: {Name: "XOR B", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rB) }},
	0xA9: {Name: "XOR C", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rC) }},
	0xAA: {Name: "XOR D", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rD) }},
	0xAB: {Name: "XOR E", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rE) }},
	0xAC: {Name: "XOR H", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rH) }},
	0xAD: {Name: "XOR L", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rL) }},
	0xAE: {Name: "XOR (HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { xorMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0xAF: {Name: "XOR A", Len: 1, Cycles: 1, Exec: func(c *SM83) { xorRegister(c, &c.rA, &c.rA) }},
	0xB0: {Name: "OR B", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rB) }},
	0xB1: {Name: "OR C", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rC) }},
	0xB2: {Name: "OR D", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rD) }},
	0xB3: {Name: "OR E", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rE) }},
	0xB4: {Name: "OR H", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rH) }},
	0xB5: {Name: "OR L", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rL) }},
	0xB6: {Name: "OR (HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { orMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0xB7: {Name: "OR A", Len: 1, Cycles: 1, Exec: func(c *SM83) { orRegister(c, &c.rA, &c.rA) }},
	0xB8: {Name: "CP B", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rB) }},
	0xB9: {Name: "CP C", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rC) }},
	0xBA: {Name: "CP D", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rD) }},
	0xBB: {Name: "CP E", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rE) }},
	0xBC: {Name: "CP H", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rH) }},
	0xBD: {Name: "CP L", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rL) }},
	0xBE: {Name: "CP (HL)", Len: 1, Cycles: 2, Exec: func(c *SM83) { cpMemComb(c, &c.rA, &c.rH, &c.rL) }},
	0xBF: {Name: "CP A", Len: 1, Cycles: 1, Exec: func(c *SM83) { cpRegister(c, &c.rA, &c.rA) }},
	0xC0: {Name: "RET NZ", Len: 1, Cycles: 5, CondCycles: 2, Exec: func(c *SM83) { retCond(c, !c.GetFlag(ZeroFlag)) }},
	0xC1: {Name: "POP BC", Len: 1, Cycles: 3, Exec: func(c *SM83) { popRegisterPair(c, &c.rB, &c.rC) }},
	0xC2: {Name: "JP NZ,nn", Len: 3, Cycles: 4, CondCycles: 3, Exec: func(c *SM83) { jpCond(c, !c.GetFlag(ZeroFlag)) }},
	0xC3: {Name: "JP nn", Len: 3, Cycles: 4, Exec: func(c *SM83) { jp(c) }},
	0xC4: {Name: "CALL NZ,nn", Len: 3, Cycles: 6, CondCycles: 3, Exec: func(c *SM83) { callCond(c, !c.GetFlag(ZeroFlag)) }},
	0xC5: {Name: "PUSH BC", Len: 1, Cycles: 4, Exec: func(c *SM83) { pushRegisterPair(c, &c.rB, &c.rC) }},
	0xC6: {Name: "ADD A,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { addImmediate(c, &c.rA) }},
	0xC7: {Name: "RST 00H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x00) }},
	0xC8: {Name: "RET Z", Len: 1, Cycles: 5, CondCycles: 2, Exec: func(c *SM83) { retCond(c, c.GetFlag(ZeroFlag)) }},
	0xC9: {Name: "RET", Len: 1, Cycles: 4, Exec: func(c *SM83) { ret(c) }},
	0xCA: {Name: "JP Z,nn", Len: 3, Cycles: 4, CondCycles: 3, Exec: func(c *SM83) { jpCond(c, c.GetFlag(ZeroFlag)) }},
	0xCB: {Name: "PREFIX CB", Len: 2, Cycles: 2, Exec: func(c *SM83) { cbPrefix(c) }},
	0xCC: {Name: "CALL Z,nn", Len: 3, Cycles: 6, CondCycles: 3, Exec: func(c *SM83) { callCond(c, c.GetFlag(ZeroFlag)) }},
	0xCD: {Name: "CALL nn", Len: 3, Cycles: 6, Exec: func(c *SM83) { call(c) }},
	0xCE: {Name: "ADC A,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { adcImmediate(c, &c.rA) }},
	0xCF: {Name: "RST 08H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x08) }},
	0xD0: {Name: "RET NC", Len: 1, Cycles: 5, CondCycles: 2, Exec: func(c *SM83) { retCond(c, !c.GetFlag(CarryFlag)) }},
	0xD1: {Name: "POP DE", Len: 1, Cycles: 3, Exec: func(c *SM83) { popRegisterPair(c, &c.rD, &c.rE) }},
	0xD2: {Name: "JP NC,nn", Len: 3, Cycles: 4, CondCycles: 3, Exec: func(c *SM83) { jpCond(c, !c.GetFlag(CarryFlag)) }},
	// 0xD3 ????
	0xD4: {Name: "CALL NC,nn", Len: 3, Cycles: 6, CondCycles: 3, Exec: func(c *SM83) { callCond(c, !c.GetFlag(CarryFlag)) }},
	0xD5: {Name: "PUSH DE", Len: 1, Cycles: 4, Exec: func(c *SM83) { pushRegisterPair(c, &c.rD, &c.rE) }},
	0xD6: {Name: "SUB n", Len: 2, Cycles: 2, Exec: func(c *SM83) { subImmediate(c, &c.rA) }},
	0xD7: {Name: "RST 10H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x10) }},
	0xD8: {Name: "RET C", Len: 1, Cycles: 5, CondCycles: 2, Exec: func(c *SM83) { retCond(c, c.GetFlag(CarryFlag)) }},
	0xD9: {Name: "RETI", Len: 1, Cycles: 4, Exec: func(c *SM83) { reti(c) }},
	0xDA: {Name: "JP C,nn", Len: 3, Cycles: 4, CondCycles: 3, Exec: func(c *SM83) { jpCond(c, c.GetFlag(CarryFlag)) }},
	// 0xDB ????
	0xDC: {Name: "CALL C,nn", Len: 3, Cycles: 6, CondCycles: 3, Exec: func(c *SM83) { callCond(c, c.GetFlag(CarryFlag)) }},
	// 0xDD ????
	0xDE: {Name: "SBC A,n", Len: 2, Cycles: 2, Exec: func(c *SM83) { sbcImmediate(c, &c.rA) }},
	0xDF: {Name: "RST 18H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x18) }},
	0xE0: {Name: "LDH (n),A", Len: 2, Cycles: 3, Exec: func(c *SM83) { ldh8ImmMemRegister(c, &c.rA) }},
	0xE1: {Name: "POP HL", Len: 1, Cycles: 3, Exec: func(c *SM83) { popRegisterPair(c, &c.rH, &c.rL) }},
	0xE2: {Name: "LD (C),A", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldMemRegisterRegister(c, &c.rC, &c.rA) }},
	// 0xE3 ????
	// 0xE4 ????
	0xE5: {Name: "PUSH HL", Len: 1, Cycles: 4, Exec: func(c *SM83) { pushRegisterPair(c, &c.rH, &c.rL) }},
	0xE6: {Name: "AND n", Len: 2, Cycles: 2, Exec: func(c *SM83) { andImmediate(c, &c.rA) }},
	0xE7: {Name: "RST 20H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x20) }},
	0xE8: {Name: "ADD SP,n", Len: 2, Cycles: 4, Exec: func(c *SM83) { addSPImmediate(c) }},
	0xE9: {Name: "JP (HL)", Len: 1, Cycles: 1, Exec: func(c *SM83) { jpMemComb(c, &c.rH, &c.rL) }},
	0xEA: {Name: "LD (nn),A", Len: 3, Cycles: 4, Exec: func(c *SM83) { ld16ImmMemRegister(c, &c.rA) }},
	// 0xEB ????
	// 0xEC ????
	// 0xED ????
	0xEE: {Name: "XOR n", Len: 2, Cycles: 2, Exec: func(c *SM83) { xorImmediate(c, &c.rA) }},
	0xEF: {Name: "RST 28H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x28) }},
	0xF0: {Name: "LDH A,(n)", Len: 2, Cycles: 3, Exec: func(c *SM83) { ldhRegisterMemImm(c, &c.rA) }},
	0xF1: {Name: "POP AF", Len: 1, Cycles: 3, Exec: func(c *SM83) { popRegisterPair(c, &c.rA, &c.rF) }},
	0xF2: {Name: "LD A,(C)", Len: 1, Cycles: 2, Exec: func(c *SM83) { ldRegisterMemRegister(c, &c.rA, &c.rC) }},
	0xF3: {Name: "DI", Len: 1, Cycles: 1, Exec: func(c *SM83) { c.ime = false }},
	// 0xF4 ????
	0xF5: {Name: "PUSH AF", Len: 1, Cycles: 4, Exec: func(c *SM83) { pushRegisterPair(c, &c.rA, &c.rF) }},
	0xF6: {Name: "OR n", Len: 2, Cycles: 2, Exec: func(c *SM83) { orImmediate(c, &c.rA) }},
	0xF7: {Name: "RST 30H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x30) }},
	// 0xF8: {Name: "LD HL,SP+n", Len: 2, Cycles: 3, Exec: func(c *SM83) { ldHLSPImmediate(c) }},
	0xF9: {Name: "LD SP,HL", Len: 1, Cycles: 2, Exec: func(c *SM83) { ld16RegCombRegister(c, &c.rSP, &c.rH, &c.rL) }},
	0xFA: {Name: "LD A,(nn)", Len: 3, Cycles: 4, Exec: func(c *SM83) { ldRegisterMem16Imm(c, &c.rA) }},
	0xFB: {Name: "EI", Len: 1, Cycles: 1, Exec: func(c *SM83) { c.ime = true }},
	// 0xFC ????
	// 0xFD ????
	0xFE: {Name: "CP n", Len: 2, Cycles: 2, Exec: func(c *SM83) { cpImmediate(c, &c.rA) }},
	0xFF: {Name: "RST 38H", Len: 1, Cycles: 4, Exec: func(c *SM83) { rst(c, 0x38) }},
}

//nolint:gochecknoglobals
var cbOpcodes = []*OpCode{
	// 0x00: {Name: "RLC B", Len: 1, Cycles: 2, Exec: func(c *SM83) { rlcRegister(c, &c.r_B) }},
	0x11: {Name: "RL C", Len: 1, Cycles: 2, Exec: func(c *SM83) { rlRegister(c, &c.rC) }},
	0x37: {Name: "SWAP A", Len: 1, Cycles: 2, Exec: func(c *SM83) { swapRegister(c, &c.rA) }},
	0x7C: {Name: "BIT 7,H", Len: 1, Cycles: 2, Exec: func(c *SM83) { bitRegister(c, 7, &c.rH) }},
	0x87: {Name: "RES 0,A", Len: 1, Cycles: 2, Exec: func(c *SM83) { resRegister(c, 0, &c.rA) }},
}

func cbPrefix(c *SM83) {
	// Handle CB-prefixed instructions
	instruction, err := c.memory.Read8(c.rPC)
	if err != nil {
		panic(fmt.Sprintf("Failed to read CB-prefixed instruction: %v", err))
	}
	c.rPC++
	inst := cbOpcodes[instruction]
	if inst != nil {
		inst.Exec(c)
	} else {
		panic(fmt.Sprintf("Unknown CB-prefixed instruction: 0x%02X", instruction))
	}
}
